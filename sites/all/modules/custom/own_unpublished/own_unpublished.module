<?php

/**
 * Implements hook_permission().
 */
function own_unpublished_permission() {
  $permissions = array(
    'edit own unpublished content' => array(
      'title' => t('Edit own unpublished content')
    ),
    'delete own unpublished content' => array(
      'title' => t('Delete own unpublished content')
    ),
  );

  foreach(node_type_get_types() as $machineName => $nodeType) {
    $permissions["edit own unpublished {$machineName} content"] = array(
      'title' => t('%type_name: Edit own unpublished content', array('%type_name' => $nodeType->name)),
    );
    $permissions["delete own unpublished {$machineName} content"] = array(
      'title' => t('%type_name: Delete own unpublished content', array('%type_name' => $nodeType->name)),
    );
    $permissions["view own unpublished {$machineName} content"] = array(
      'title' => t('%type_name: View own unpublished content', array('%type_name' => $nodeType->name)),
    );
  }

  return $permissions;
}

/**
 * Implements hook_node_access().
 *
 * Allow our new permissions to work on node access
 */
function own_unpublished_node_access($node, $op, $account) {
  if (is_object($node)) {
    $type = is_string($node) ? $node : $node->type;
    if (in_array($type, node_permissions_get_configured_types()) && $node->uid == $account->uid && $node->status == 0) {
      if ($op == 'view' && user_access("view own unpublished {$type} content", $account)) {
        return NODE_ACCESS_ALLOW;
      }

      if ($op == 'update' && user_access("edit own unpublished {$type} content", $account)) {
        return NODE_ACCESS_ALLOW;
      }

      if ($op == 'delete' && user_access("delete own unpublished {$type} content", $account)) {
        return NODE_ACCESS_ALLOW;
      }
    }
  }
}

/**
 * Implements hook_node_access_records().
 */
function own_unpublished_node_access_records($node) {
  // We only care about the node if is unpublished. If not, it is
  // treated just like any other node and we completely ignore it.
  if ($node->status == 0) {
    $grants = array();
    // Unpublished nodes should be viewable to all editors.
    $grants[] = array(
      'realm' => 'view_own_unpublished_content',
      'gid' => 1,
      'grant_view' => 1,
      'grant_update' => 0,
      'grant_delete' => 0,
      'priority' => 0,
    );
    $grants[] = array(
      'realm' => 'view_own_unpublished_' . $node->type . '_content',
      'gid' => 1,
      'grant_view' => 1,
      'grant_update' => 0,
      'grant_delete' => 0,
      'priority' => 0,
    );
    return $grants;
  }
}

/**
 * Implements hook_node_grants().
 */
function own_unpublished_node_grants($account, $op) {
  $grants = array();
  switch($op){
  case 'view':
    if (user_access('view own unpublished content', $account)) {
      $grants['view_own_unpublished_content'] = array(1);
      return $grants;
    }
    foreach(node_permissions_get_configured_types() as $type) {
      if (user_access("view own unpublished $type content", $account)) {
        $grants['view_own_unpublished_' . $type . '_content'] = array(1);
      }
    }
    break;
  case 'update':
    if (user_access('edit own unpublished content', $account)) {
      $grants['edit_own_unpublished_content'] = array(1);
      return $grants;
    }
    foreach(node_permissions_get_configured_types() as $type) {
      if (user_access("edit own unpublished $type content", $account)) {
        $grants['edit_own_unpublished_' . $type . '_content'] = array(1);
      }
    }
    break;
  }
  return $grants;
}

/**
 * Implements hook_views_data_alter()
 */
// function own_unpublished_views_data_alter(&$data) {
//   // published status + extra handler is taken over by our handler
//   // $data['node']['status_extra']['filter']['handler'] = 'own_unpublished_handler_filter_node_status';
//   $data['node_access']['nid']['filter']['handler'] = 'own_unpublished_handler_filter_node_access';
// }

/**
 * Implements hook_views_handlers()
 */
// function own_unpublished_views_handlers() {
//   return array(
//     'info' => array(
//       'path' => drupal_get_path('module', 'own_unpublished'),
//     ),
//     'handlers' => array(
//       'own_unpublished_handler_filter_node_access' => array(
//         'parent' => 'views_handler_filter_node_access',
//       ),
//     ),
//   );
// }

/**
 * Implements hook_views_query_substitutions().
 */
// function own_unpublished_views_query_substitutions() {
//   foreach (node_type_get_types() as $type => $name) {
//     $substitutions["***OWNUNPUBLISHED_VIEW_$type***"] = intval(user_access('view own unpublished ' . $type . ' content'));
//     $substitutions["***OWNUNPUBLISHED_EDIT_$type***"] = intval(user_access('edit own unpublished ' . $type . ' content'));
//     $substitutions["***OWNUNPUBLISHED_DELETE_$type***"] = intval(user_access('delete own unpublished ' . $type . ' content'));
//   }
//   return $substitutions;
// }
